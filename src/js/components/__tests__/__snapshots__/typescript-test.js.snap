// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript definition is updated 1`] = `
Object {
  "Accordion": "import * as React from \\"react\\";

export interface AccordionProps {
  activeIndex?: number | number[];
  animate?: boolean;
  children: React.ReactNode[];
  onActive?: (...args: any[]) => any;
  multiple?: boolean;
  messages?: {tabContents: string};
}

declare const Accordion: React.ComponentType<AccordionProps>;

export { Accordion };
",
  "AccordionPanel": "import * as React from \\"react\\";

export interface AccordionPanelProps {
  label: string | React.ReactNode;
  header?: React.ReactNode;
}

declare const AccordionPanel: React.ComponentType<AccordionPanelProps>;

export { AccordionPanel };
",
  "Anchor": "import * as React from \\"react\\";

export interface AnchorProps {
  a11yTitle?: string;
  href?: string;
  icon?: JSX.Element;
  label?: React.ReactNode;
  onClick?: (...args: any[]) => any;
  primary?: boolean;
  reverse?: boolean;
}

declare const Anchor: React.ComponentType<AnchorProps>;

export { Anchor };
",
  "Box": "import * as React from \\"react\\";

export interface BoxProps {
  a11yTitle?: string;
  align?: \\"start\\" | \\"center\\" | \\"end\\" | \\"baseline\\" | \\"stretch\\";
  alignContent?: \\"start\\" | \\"center\\" | \\"end\\" | \\"between\\" | \\"around\\" | \\"stretch\\";
  alignSelf?: \\"start\\" | \\"center\\" | \\"end\\" | \\"stretch\\";
  animation?: \\"fadeIn\\" | \\"fadeOut\\" | \\"jiggle\\" | \\"pulse\\" | \\"slideUp\\" | \\"slideDown\\" | \\"slideLeft\\" | \\"slideRight\\" | \\"zoomIn\\" | \\"zoomOut\\" | {type: \\"fadeIn\\" | \\"fadeOut\\" | \\"jiggle\\" | \\"pulse\\" | \\"slideUp\\" | \\"slideDown\\" | \\"slideLeft\\" | \\"slideRight\\" | \\"zoomIn\\" | \\"zoomOut\\",delay: number,duration: number,size: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\"} | \\"fadeIn\\" | \\"fadeOut\\" | \\"jiggle\\" | \\"pulse\\" | \\"slideUp\\" | \\"slideDown\\" | \\"slideLeft\\" | \\"slideRight\\" | \\"zoomIn\\" | \\"zoomOut\\" | {type: \\"fadeIn\\" | \\"fadeOut\\" | \\"jiggle\\" | \\"pulse\\" | \\"slideUp\\" | \\"slideDown\\" | \\"slideLeft\\" | \\"slideRight\\" | \\"zoomIn\\" | \\"zoomOut\\",delay: number,duration: number,size: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\"}[];
  background?: string | {color: string,dark: boolean | string,image: string,position: string,opacity: \\"weak\\" | \\"medium\\" | \\"strong\\" | boolean,light: string};
  basis?: \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\" | \\"auto\\";
  border?: boolean | \\"top\\" | \\"left\\" | \\"bottom\\" | \\"right\\" | \\"horizontal\\" | \\"vertical\\" | \\"all\\" | {color: string | {dark: string,light: string},side: \\"top\\" | \\"left\\" | \\"bottom\\" | \\"right\\" | \\"horizontal\\" | \\"vertical\\" | \\"all\\",size: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\"};
  direction?: \\"row\\" | \\"column\\" | \\"row-responsive\\";
  elevation?: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  flex?: \\"grow\\" | \\"shrink\\" | \\"true\\" | \\"false\\";
  fill?: \\"horizontal\\" | \\"vertical\\" | \\"true\\" | \\"false\\";
  gap?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  gridArea?: string;
  height?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  justify?: \\"start\\" | \\"center\\" | \\"between\\" | \\"end\\";
  margin?: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | {bottom: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",horizontal: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",left: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",right: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",top: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",vertical: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\"};
  overflow?: \\"auto\\" | \\"hidden\\" | \\"scroll\\" | \\"visible\\";
  pad?: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | {bottom: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",horizontal: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",left: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",right: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",top: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",vertical: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\"};
  responsive?: boolean;
  round?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"full\\";
  tag?: string;
  width?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  wrap?: boolean;
}

declare const Box: React.ComponentType<BoxProps>;

export { Box };
",
  "Button": "import * as React from \\"react\\";

export interface ButtonProps {
  a11yTitle?: string;
  active?: boolean;
  color?: string;
  fill?: boolean;
  focusIndicator?: boolean;
  hoverIndicator?: boolean | \\"background\\" | {background: boolean | string};
  href?: string;
  icon?: JSX.Element;
  label?: React.ReactNode;
  onClick?: (...args: any[]) => any;
  plain?: boolean;
  primary?: boolean;
  reverse?: boolean;
  type?: \\"button\\" | \\"reset\\" | \\"submit\\";
}

declare const Button: React.ComponentType<ButtonProps>;

export { Button };
",
  "Calendar": "import * as React from \\"react\\";

export interface CalendarProps {
  bounds?: string[];
  date?: string;
  dates?: string | string[][];
  disabled?: string | string[][];
  firstDayOfWeek?: \\"0\\" | \\"1\\";
  locale?: string;
  onSelect?: (...args: any[]) => any;
  size?: \\"small\\" | \\"medium\\" | \\"large\\";
}

declare const Calendar: React.ComponentType<CalendarProps>;

export { Calendar };
",
  "Carousel": "import * as React from \\"react\\";

export interface CarouselProps {
  fill?: boolean;
  play?: number;
}

declare const Carousel: React.ComponentType<CarouselProps>;

export { Carousel };
",
  "Chart": "import * as React from \\"react\\";

export interface ChartProps {
  bounds?: number[][];
  color?: string | {color: string,opacity: \\"weak\\" | \\"medium\\" | \\"strong\\" | boolean};
  onClick?: (...args: any[]) => any;
  onHover?: (...args: any[]) => any;
  overflow?: boolean;
  round?: boolean;
  size?: \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | {height: \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\",width: \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\"};
  thickness?: \\"hair\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"none\\";
  type?: \\"bar\\" | \\"line\\" | \\"area\\";
  values: number | number[] | {label: string,onClick: (...args: any[]) => any,onHover: (...args: any[]) => any,value: number | number[]}[];
}

declare const Chart: React.ComponentType<ChartProps>;

export { Chart };
",
  "CheckBox": "import * as React from \\"react\\";

export interface CheckBoxProps {
  checked?: boolean;
  disabled?: boolean;
  id?: string;
  label?: React.ReactNode;
  name?: string;
  onChange?: (...args: any[]) => any;
  reverse?: boolean;
  toggle?: boolean;
}

declare const CheckBox: React.ComponentType<CheckBoxProps>;

export { CheckBox };
",
  "Clock": "import * as React from \\"react\\";

export interface ClockProps {
  hourLimit?: \\"12\\" | \\"24\\" | \\"12\\" | \\"24\\";
  onChange?: (...args: any[]) => any;
  precision?: \\"hours\\" | \\"minutes\\" | \\"seconds\\";
  run?: boolean | \\"backward\\" | \\"forward\\";
  size?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  time?: string;
  type?: \\"analog\\" | \\"digital\\";
}

declare const Clock: React.ComponentType<ClockProps>;

export { Clock };
",
  "Collapsible": "import * as React from \\"react\\";

export interface CollapsibleProps {
  open?: boolean;
}

declare const Collapsible: React.ComponentType<CollapsibleProps>;

export { Collapsible };
",
  "DataTable": "import * as React from \\"react\\";

export interface DataTableProps {
  columns?: {align: \\"center\\" | \\"start\\" | \\"end\\",aggregate: \\"avg\\" | \\"max\\" | \\"min\\" | \\"sum\\",footer: React.ReactNode | {aggregate: boolean},header: string | React.ReactNode | {aggregate: boolean},property: string,render: (...args: any[]) => any,search: boolean}[];
  data?: {}[];
  groupBy?: string;
  onMore?: (...args: any[]) => any;
  onSearch?: (...args: any[]) => any;
  resizeable?: boolean;
  size?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  sortable?: boolean;
}

declare const DataTable: React.ComponentType<DataTableProps>;

export { DataTable };
",
  "Diagram": "import * as React from \\"react\\";

export interface DiagramProps {
  connections: {anchor: \\"center\\" | \\"vertical\\" | \\"horizontal\\",color: string,fromTarget: string | object,label: string,offset: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",thickness: \\"hair\\" | \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",toTarget: string | object,type: \\"direct\\" | \\"curved\\" | \\"rectilinear\\"}[];
}

declare const Diagram: React.ComponentType<DiagramProps>;

export { Diagram };
",
  "Distribution": "import * as React from \\"react\\";

export interface DistributionProps {
  children?: (...args: any[]) => any;
  gap?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  values: {value: number}[];
}

declare const Distribution: React.ComponentType<DistributionProps>;

export { Distribution };
",
  "Drop": "import * as React from \\"react\\";

export interface DropProps {
  align?: {top: \\"top\\" | \\"bottom\\",bottom: \\"top\\" | \\"bottom\\",right: \\"left\\" | \\"right\\",left: \\"left\\" | \\"right\\"};
  onClickOutside?: (...args: any[]) => any;
  onEsc?: (...args: any[]) => any;
  responsive?: boolean;
  restrictFocus?: boolean;
  stretch?: boolean;
  target: object;
}

declare const Drop: React.ComponentType<DropProps>;

export { Drop };
",
  "DropButton": "import * as React from \\"react\\";

export interface DropButtonProps {
  a11yTitle?: string;
  disabled?: boolean;
  dropAlign?: {top: \\"top\\" | \\"bottom\\",bottom: \\"top\\" | \\"bottom\\",right: \\"left\\" | \\"right\\",left: \\"left\\" | \\"right\\"};
  dropContent: JSX.Element;
  dropTarget?: object;
  onClose?: (...args: any[]) => any;
  onOpen?: (...args: any[]) => any;
  open?: boolean;
}

declare const DropButton: React.ComponentType<DropButtonProps>;

export { DropButton };
",
  "FormField": "import * as React from \\"react\\";

export interface FormFieldProps {
  error?: string | React.ReactNode;
  help?: string | React.ReactNode;
  htmlFor?: string;
  label?: string | React.ReactNode;
}

declare const FormField: React.ComponentType<FormFieldProps>;

export { FormField };
",
  "Grid": "import * as React from \\"react\\";

export interface GridProps {
  align?: \\"start\\" | \\"center\\" | \\"end\\" | \\"stretch\\";
  alignContent?: \\"start\\" | \\"center\\" | \\"end\\" | \\"between\\" | \\"around\\" | \\"stretch\\";
  areas?: {name: string,start: number[],end: number[]}[];
  columns?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\" | \\"flex\\" | \\"auto\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\" | \\"flex\\" | \\"auto\\"[][] | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | {count: \\"fit\\" | \\"fill\\",size: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\" | \\"flex\\" | \\"auto\\"[]};
  fill?: \\"horizontal\\" | \\"vertical\\" | \\"true\\" | \\"false\\";
  gap?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"none\\" | {row: \\"small\\" | \\"medium\\" | \\"large\\" | \\"none\\",column: \\"small\\" | \\"medium\\" | \\"large\\" | \\"none\\"};
  justify?: \\"start\\" | \\"center\\" | \\"end\\" | \\"stretch\\";
  justifyContent?: \\"start\\" | \\"center\\" | \\"end\\" | \\"between\\" | \\"around\\" | \\"stretch\\";
  rows?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\" | \\"flex\\" | \\"auto\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\" | \\"flex\\" | \\"auto\\"[][] | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  tag?: string;
}

declare const Grid: React.ComponentType<GridProps>;

export { Grid };
",
  "Grommet": "import * as React from \\"react\\";

export interface GrommetProps {
  full?: boolean;
  theme?: object;
}

declare const Grommet: React.ComponentType<GrommetProps>;

export { Grommet };
",
  "Heading": "import * as React from \\"react\\";

export interface HeadingProps {
  color?: string;
  level?: \\"1\\" | \\"2\\" | \\"3\\" | \\"4\\" | \\"1\\" | \\"2\\" | \\"3\\" | \\"4\\";
  margin?: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | {bottom: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\",top: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\"};
  responsive?: boolean;
  size?: \\"small\\" | \\"medium\\" | \\"large\\";
  textAlign?: \\"start\\" | \\"center\\" | \\"end\\";
  truncate?: boolean;
}

declare const Heading: React.ComponentType<HeadingProps>;

export { Heading };
",
  "Image": "import * as React from \\"react\\";

export interface ImageProps {
  fit?: \\"cover\\" | \\"contain\\";
}

declare const Image: React.ComponentType<ImageProps>;

export { Image };
",
  "InfiniteScroll": "import * as React from \\"react\\";

export interface InfiniteScrollProps {
  children?: (...args: any[]) => any;
  items?: any[];
  onMore?: (...args: any[]) => any;
  renderMarker?: (...args: any[]) => any;
  scrollableAncestor?: React.ReactNode | \\"window\\";
  show?: number;
  step?: number;
}

declare const InfiniteScroll: React.ComponentType<InfiniteScrollProps>;

export { InfiniteScroll };
",
  "Keyboard": "import * as React from \\"react\\";

export interface KeyboardProps {
  target?: \\"component\\" | \\"document\\";
  onBackspace?: (...args: any[]) => any;
  onComma?: (...args: any[]) => any;
  onDown?: (...args: any[]) => any;
  onEnter?: (...args: any[]) => any;
  onEsc?: (...args: any[]) => any;
  onLeft?: (...args: any[]) => any;
  onRight?: (...args: any[]) => any;
  onShift?: (...args: any[]) => any;
  onSpace?: (...args: any[]) => any;
  onTab?: (...args: any[]) => any;
  onUp?: (...args: any[]) => any;
}

declare const Keyboard: React.ComponentType<KeyboardProps>;

export { Keyboard };
",
  "Layer": "import * as React from \\"react\\";

export interface LayerProps {
  full?: boolean | \\"vertical\\" | \\"horizontal\\";
  margin?: \\"none\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | {bottom: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",horizontal: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",left: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",right: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",top: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\",vertical: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\"};
  modal?: boolean;
  onClickOutside?: boolean;
  onEsc?: (...args: any[]) => any;
  plain?: boolean;
  position?: \\"bottom\\" | \\"center\\" | \\"hidden\\" | \\"left\\" | \\"right\\" | \\"top\\";
  responsive?: boolean;
}

declare const Layer: React.ComponentType<LayerProps>;

export { Layer };
",
  "Markdown": "import * as React from \\"react\\";

export interface MarkdownProps {
  
}

declare const Markdown: React.ComponentType<MarkdownProps>;

export { Markdown };
",
  "Menu": "import * as React from \\"react\\";

export interface MenuProps {
  disabled?: boolean;
  dropAlign?: {top: \\"top\\" | \\"bottom\\",bottom: \\"top\\" | \\"bottom\\",left: \\"right\\" | \\"left\\",right: \\"right\\" | \\"left\\"};
  dropBackground?: string | {color: string,opacity: \\"weak\\" | \\"medium\\" | \\"strong\\" | boolean};
  dropTarget?: object;
  icon?: boolean | React.ReactNode;
  items: object[];
  label?: string | React.ReactNode;
  messages?: {closeMenu: string,openMenu: string};
  size?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
}

declare const Menu: React.ComponentType<MenuProps>;

export { Menu };
",
  "Meter": "import * as React from \\"react\\";

export interface MeterProps {
  background?: string | {color: string,opacity: \\"weak\\" | \\"medium\\" | \\"strong\\" | boolean};
  round?: boolean;
  size?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\";
  thickness?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  type?: \\"bar\\" | \\"circle\\";
  values?: {color: string,highlight: boolean,label: string,onClick: (...args: any[]) => any,onHover: (...args: any[]) => any,value: number}[];
}

declare const Meter: React.ComponentType<MeterProps>;

export { Meter };
",
  "Paragraph": "import * as React from \\"react\\";

export interface ParagraphProps {
  color?: string;
  margin?: \\"none\\" | \\"small\\" | \\"medium\\" | \\"large\\" | {bottom: \\"small\\" | \\"medium\\" | \\"large\\",top: \\"small\\" | \\"medium\\" | \\"large\\"};
  size?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  textAlign?: \\"start\\" | \\"center\\" | \\"end\\";
}

declare const Paragraph: React.ComponentType<ParagraphProps>;

export { Paragraph };
",
  "RadioButton": "import * as React from \\"react\\";

export interface RadioButtonProps {
  checked?: boolean;
  disabled?: boolean;
  id?: string;
  label?: React.ReactNode;
  name: string;
  onChange?: (...args: any[]) => any;
}

declare const RadioButton: React.ComponentType<RadioButtonProps>;

export { RadioButton };
",
  "RangeInput": "import * as React from \\"react\\";

export interface RangeInputProps {
  id?: string;
  min?: number;
  max?: number;
  name?: string;
  onChange?: (...args: any[]) => any;
  step?: number;
  value?: number;
}

declare const RangeInput: React.ComponentType<RangeInputProps>;

export { RangeInput };
",
  "RangeSelector": "import * as React from \\"react\\";

export interface RangeSelectorProps {
  color?: string;
  direction?: \\"horizontal\\" | \\"vertical\\";
  invert?: boolean;
  max?: number;
  messages?: {lower: string,upper: string};
  min?: number;
  onChange?: (...args: any[]) => any;
  opacity?: \\"weak\\" | \\"medium\\" | \\"strong\\";
  round?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"full\\";
  size?: \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"full\\";
  step?: number;
  values: number[];
}

declare const RangeSelector: React.ComponentType<RangeSelectorProps>;

export { RangeSelector };
",
  "RoutedAnchor": "import * as React from \\"react\\";

export interface RoutedAnchorProps {
  path: string;
  method?: \\"push\\" | \\"replace\\";
}

declare const RoutedAnchor: React.ComponentType<RoutedAnchorProps>;

export { RoutedAnchor };
",
  "RoutedButton": "import * as React from \\"react\\";

export interface RoutedButtonProps {
  path: string;
  method?: \\"push\\" | \\"replace\\";
}

declare const RoutedButton: React.ComponentType<RoutedButtonProps>;

export { RoutedButton };
",
  "Select": "import * as React from \\"react\\";

export interface SelectProps {
  a11yTitle?: string;
  children?: (...args: any[]) => any;
  closeOnChange?: boolean;
  disabled?: boolean;
  dropAlign?: {top: \\"top\\" | \\"bottom\\",bottom: \\"top\\" | \\"bottom\\",right: \\"left\\" | \\"right\\",left: \\"left\\" | \\"right\\"};
  dropTarget?: object;
  focusIndicator?: boolean;
  messages?: {multiple: string};
  multiple?: boolean;
  onChange?: (...args: any[]) => any;
  onClose?: (...args: any[]) => any;
  onSearch?: (...args: any[]) => any;
  options: string | JSX.Element | object[];
  placeholder?: string | React.ReactNode;
  plain?: boolean;
  searchPlaceholder?: string;
  selected?: number | number[];
  size?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  value?: string | JSX.Element | object | string | object[];
}

declare const Select: React.ComponentType<SelectProps>;

export { Select };
",
  "SkipLinks": "import * as React from \\"react\\";

export interface SkipLinksProps {
  children: any[];
  messages?: {skipTo: string};
}

declare const SkipLinks: React.ComponentType<SkipLinksProps>;

export { SkipLinks };
",
  "Stack": "import * as React from \\"react\\";

export interface StackProps {
  anchor?: \\"center\\" | \\"left\\" | \\"right\\" | \\"top\\" | \\"bottom\\" | \\"top-left\\" | \\"bottom-left\\" | \\"top-right\\" | \\"bottom-right\\";
  fill?: boolean;
  guidingChild?: number | \\"first\\" | \\"last\\";
}

declare const Stack: React.ComponentType<StackProps>;

export { Stack };
",
  "Tab": "import * as React from \\"react\\";

export interface TabProps {
  title?: string;
}

declare const Tab: React.ComponentType<TabProps>;

export { Tab };
",
  "Table": "import * as React from \\"react\\";

export interface TableProps {
  caption?: string;
}

declare const Table: React.ComponentType<TableProps>;

export { Table };
",
  "TableBody": "import * as React from \\"react\\";

export interface TableBodyProps {
  
}

declare const TableBody: React.ComponentType<TableBodyProps>;

export { TableBody };
",
  "TableCell": "import * as React from \\"react\\";

export interface TableCellProps {
  colSpan?: string;
  plain?: boolean;
  scope?: \\"col\\" | \\"row\\";
  size?: \\"xxsmall\\" | \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"1/2\\" | \\"1/3\\" | \\"2/3\\" | \\"1/4\\" | \\"3/4\\";
  verticalAlign?: \\"top\\" | \\"middle\\" | \\"bottom\\";
}

declare const TableCell: React.ComponentType<TableCellProps>;

export { TableCell };
",
  "TableFooter": "import * as React from \\"react\\";

export interface TableFooterProps {
  
}

declare const TableFooter: React.ComponentType<TableFooterProps>;

export { TableFooter };
",
  "TableHeader": "import * as React from \\"react\\";

export interface TableHeaderProps {
  
}

declare const TableHeader: React.ComponentType<TableHeaderProps>;

export { TableHeader };
",
  "TableRow": "import * as React from \\"react\\";

export interface TableRowProps {
  
}

declare const TableRow: React.ComponentType<TableRowProps>;

export { TableRow };
",
  "Tabs": "import * as React from \\"react\\";

export interface TabsProps {
  activeIndex?: number;
  children: React.ReactNode[];
  justify?: \\"start\\" | \\"center\\" | \\"end\\";
  messages?: {tabContents: string};
  onActive?: (...args: any[]) => any;
}

declare const Tabs: React.ComponentType<TabsProps>;

export { Tabs };
",
  "Text": "import * as React from \\"react\\";

export interface TextProps {
  color?: string;
  margin?: \\"none\\" | \\"small\\" | \\"medium\\" | \\"large\\" | {bottom: \\"small\\" | \\"medium\\" | \\"large\\",top: \\"small\\" | \\"medium\\" | \\"large\\"};
  size?: \\"xsmall\\" | \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\" | \\"xxlarge\\";
  tag?: string;
  textAlign?: \\"start\\" | \\"center\\" | \\"end\\";
  truncate?: boolean;
  weight?: \\"normal\\" | \\"bold\\" | number;
}

declare const Text: React.ComponentType<TextProps>;

export { Text };
",
  "TextArea": "import * as React from \\"react\\";

export interface TextAreaProps {
  id?: string;
  focusIndicator?: boolean;
  name?: string;
  placeholder?: string;
  plain?: boolean;
  value?: string;
}

declare const TextArea: React.ComponentType<TextAreaProps>;

export { TextArea };
",
  "TextInput": "import * as React from \\"react\\";

export interface TextInputProps {
  dropAlign?: {top: \\"top\\" | \\"bottom\\",bottom: \\"top\\" | \\"bottom\\",right: \\"left\\" | \\"right\\",left: \\"left\\" | \\"right\\"};
  dropTarget?: object;
  id?: string;
  focusIndicator?: boolean;
  messages?: {enterSelect: string,suggestionsCount: string,suggestionsExist: string,suggestionIsOpen: string};
  name?: string;
  onInput?: (...args: any[]) => any;
  onSelect?: (...args: any[]) => any;
  onSuggestionsOpen?: (...args: any[]) => any;
  onSuggestionsClose?: (...args: any[]) => any;
  placeholder?: string | React.ReactNode;
  plain?: boolean;
  size?: \\"small\\" | \\"medium\\" | \\"large\\" | \\"xlarge\\";
  suggestions?: {label: React.ReactNode,value: any} | string[];
  value?: string;
}

declare const TextInput: React.ComponentType<TextInputProps>;

export { TextInput };
",
  "Video": "import * as React from \\"react\\";

export interface VideoProps {
  autoPlay?: boolean;
  controls?: \\"false\\" | \\"over\\" | \\"below\\";
  fit?: \\"cover\\" | \\"contain\\";
  loop?: boolean;
  mute?: boolean;
}

declare const Video: React.ComponentType<VideoProps>;

export { Video };
",
  "WorldMap": "import * as React from \\"react\\";

export interface WorldMapProps {
  color?: string;
  continents?: {color: string,name: \\"Africa\\" | \\"Asia\\" | \\"Australia\\" | \\"Europe\\" | \\"North America\\" | \\"South America\\",onClick: (...args: any[]) => any,onHover: (...args: any[]) => any}[];
  onSelectPlace?: (...args: any[]) => any;
  places?: {color: string,name: string,location: number[],onClick: (...args: any[]) => any,onHover: (...args: any[]) => any}[];
  hoverColor?: string;
}

declare const WorldMap: React.ComponentType<WorldMapProps>;

export { WorldMap };
",
}
`;
